{"name":"DoSnapshot","tagline":"Snapshot creator for Digital Ocean droplets. Multi-threading. Auto-cleanup. Cron optimized.","body":"\r\n[![Gem Version](https://badge.fury.io/rb/do_snapshot.svg)](http://badge.fury.io/rb/do_snapshot)\r\n[![Build Status](https://travis-ci.org/merqlove/do_snapshot.svg?branch=master)](https://travis-ci.org/merqlove/do_snapshot)\r\n[![Dependency Status](https://gemnasium.com/merqlove/do_snapshot.svg)](https://gemnasium.com/merqlove/do_snapshot)\r\n[![Coverage Status](https://coveralls.io/repos/merqlove/do_snapshot/badge.png?branch=master)](https://coveralls.io/r/merqlove/do_snapshot?branch=master)\r\n[![Inline docs](http://inch-ci.org/github/merqlove/do_snapshot.png?branch=master)](http://inch-ci.org/github/merqlove/do_snapshot)\r\n[![Code Climate](https://codeclimate.com/github/merqlove/do_snapshot.png)](https://codeclimate.com/github/merqlove/do_snapshot)\r\n\r\nYou can use this gem to backup's DigitalOcean droplet's via snapshot method.\r\n\r\nHere some features:\r\n\r\n- Multiple threads out of the box. No matter how much droplet's you have.\r\n- Auto-cleanup for old snapshots.\r\n- Binary special for cron and command-line.\r\n- Mail notifications when fail or maximum of snapshots is reached for one or multiple droplets.\r\n- Custom mail settings (You can set [Pony](https://github.com/benprew/pony) mail settings).\r\n- Stop mode (when you don't want to create new snapshots when maximum is reached).\r\n- Timeout for bad requests & uncaught loops.\r\n- Logging into selected directory.\r\n- Verbose mode for research.\r\n- Quiet mode for silence.\r\n\r\nThere not so much of dependencies:\r\n\r\n- `Digitalocean` for API requests.\r\n- `Thor` for CLI.\r\n- `Pony` for mail notifications.\r\n\r\n## Compatibility\r\n\r\nRuby versions: 1.9.3 and higher.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'do_snapshot'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install do_snapshot\r\n\r\n## Usage\r\n\r\nFirst you may need to set DigitalOcean API keys: \r\n\r\n    $ export DIGITAL_OCEAN_CLIENT_ID=\"SOMEID\"\r\n    $ export DIGITAL_OCEAN_API_KEY=\"SOMEKEY\"\r\n \r\nIf you want to set keys without environment, than set it via options when you run do_snapshot:\r\n\r\n    $ do_snapshot --digital-ocean-client-id YOURLONGAPICLIENTID --digital-ocean-api-key YOURLONGAPIKEY\r\n\r\n#### Basic usage\r\n \r\nHere we `keeping` only 5 **latest** snapshots and cleanup older after new one is created. If creation of snapshots failed no one will be deleted. By default we keeping `10` droplets.\r\n\r\n    $ do_snapshot --keep 5 -c\r\n  \r\nKeep latest 3 from selected droplets:\r\n  \r\n    $ do_snapshot --only 123456 1234567 --keep 3\r\n  \r\nWorking with all except selected droplets:\r\n  \r\n    $ do_snapshot --exclude 123456 123457\r\n  \r\nKeep latest 5 snapshots, send mail notification instead of creating new one:\r\n  \r\n    $ do_snapshot --keep 10 --stop --mail to:yourmail@example.com\r\n    \r\nE-mail notifications disabled out of the box. \r\nFor working mailer you need to set e-mail settings via run options.\r\n\r\n    --mail to:mail@somehost.com from:from@host.com --smtp address:smtp.gmail.com port:25 user_name:someuser password:somepassword\r\n\r\n#### Cron example\r\n\r\n    0 4 * * 7 /.../bin/do_snapshot -k 5 -m to:TO from:FROM -t address:HOST user_name:LOGIN password:PASSWORD port:2525 -q -c\r\n\r\n#### Real world example\r\n\r\n    $ bin/do_snapshot --only 123456 -k 3 -c -m to:TO from:FROM -t address:HOST user_name:LOGIN password:PASSWORD port:2525 -v\r\n    \r\n    Checking DigitalOcean Id's.\r\n    Start performing operations\r\n    Setting DigitalOcean Id's.\r\n    Loading list of DigitalOcean droplets\r\n    Working with list of DigitalOcean droplets\r\n    Preparing droplet id: 123456 name: mrcr.ru to take snapshot.\r\n    Shutting down droplet.\r\n    Start creating snapshot for droplet id: 123456 name: mrcr.ru.\r\n    Wait until snapshot will be created.\r\n    Snapshot name: mrcr.ru_2014_07_18 created successfully.\r\n    Droplet id: 123456 name: mrcr.ru snapshots: 4.\r\n    For droplet with id: 123456 and name: mrcr.ru the maximum number 3 of snapshots is reached.\r\n    Cleaning up snapshots for droplet id: 123456 name: mrcr.ru.\r\n    Snapshot name: mrcr.ru_2014_07_17 delete requested.\r\n    All operations has been finished.\r\n    Sending e-mail notification.\r\n\r\n### All options:    \r\n\r\n    > $ do_snapshot c  \r\n    \r\n    aliases: s, snap, create\r\n    \r\n    Options:\r\n      -o, [--only=123456 123456 123456]                              # Select some droplets.\r\n      -e, [--exclude=123456 123456 123456]                           # Except some droplets.\r\n      -k, [--keep=5]                                                 # How much snapshots you want to keep?\r\n                                                                     # Default: 10\r\n      -d, [--delay=5]                                                # Delay between snapshot operation status requests.\r\n                                                                     # Default: 10                                                                    \r\n          [--timeout=250]                                            # Timeout in sec's for events like Power Off or Create Snapshot.\r\n                                                                     # Default: 180                                                                     \r\n      -m, [--mail=to:yourmail@example.com]                           # Receive mail if fail or maximum is reached.\r\n      -t, [--smtp=user_name:yourmail@example.com password:password]  # SMTP options.\r\n      -l, [--log=/Users/someone/.do_snapshot/main.log]               # Log file path. By default logging is disabled.\r\n      -c, [--clean], [--no-clean]                                    # Cleanup snapshots after create. If you have more images than you want to `keep`, older will be deleted.\r\n      -s, [--stop], [--no-stop]                                      # Stop creating snapshots if maximum is reached.\r\n      -v, [--trace], [--no-trace]                                    # Verbose mode.\r\n      -q, [--quiet], [--no-quiet]                                    # Quiet mode. If don't need any messages in console.\r\n          [--digital-ocean-client-id=YOURLONGAPICLIENTID]            # DIGITAL_OCEAN_CLIENT_ID. if you can't use environment.\r\n          [--digital-ocean-api-key=YOURLONGAPIKEY]                   # DIGITAL_OCEAN_API_KEY. if you can't use environment.    \r\n    \r\n    Description:\r\n      `do_snapshot` able to create and cleanup snapshots on your droplets.\r\n    \r\n      You can optionally specify parameters to select or exclude some droplets.   \r\n\r\n## Contributing\r\n\r\n1. Fork it ( https://github.com/merqlove/do_snapshot/fork )\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create a new Pull Request\r\n","google":"UA-52965116-1","note":"Don't delete this file! It's used internally to help with page regeneration."}